berth = sum(berth))
as.data.frame(grid_emissions) %>%
group_by(pollutant, group, geom) %>%
summarise(sailing = sum(sailing),
berth = sum(berth))
grid_emissions %>% as_tibble %>%
group_by(pollutant, group, geom) %>%
summarise(sailing = sum(sailing),
berth = sum(berth))
as_tibble.sf
as.data.frame(grid_emissions) %>%
group_by(pollutant, group, geom) %>%
summarise(sailing = sum(sailing),
berth = sum(berth),
geom = NA)
grid_emissions %>%
group_by(pollutant, group, geom) %>%
summarise(sailing = sum(sailing),
berth = sum(berth),
geom = NA)
grid_emissions %>%
group_by(pollutant, group) %>%
summarise(sailing = sum(sailing),
berth = sum(berth))
library(dplyr)
library(tidyr)
grid_emissions %>%
group_by.sf(pollutant, group) %>%
summarise(sailing = sum(sailing),
berth = sum(berth))
group_by.sf <- function(.data, ..., add = FALSE) {
class(.data) <- setdiff(class(.data), "sf")
st_as_sf(NextMethod(), sf_column_name = attr(.data, "sf_column"))
}
grid_emissions %>%
group_by.sf(pollutant, group) %>%
summarise(sailing = sum(sailing),
berth = sum(berth))
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
source('https://raw.githubusercontent.com/r-spatial/sf/master/R/join.R')
source('https://raw.githubusercontent.com/r-spatial/sf/master/R/tidyverse.R')
## Script to process river emissions and GPS data.
## Key datasets
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid = "+init=epsg:27700"
google = "+init=epsg:3857"
## Get GPS data for one day of boats
load('gps/Gravesend_ANSData_01_Apr_2016.Rdata')
gps_data                  <- data
rm(data)
gps_data                  <- st_as_sf(gps_data, coords = c('lon', 'lat'), crs = 4326)
gps_data                  <- st_transform(gps_data, 27700)
gps_data                  <- gps_data[!is.na(gps_data$VESSEL_TYPE),]
## Import the ship classifications and link to the gps_data
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
gps_data                  <- left_join(gps_data, vessel_class, by = c('VESSEL_TYPE' = 'code'))
## Remove data from GPS data that we don't need
gps_data                  <- gps_data[,c('group')]
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]), by = c('ship_type' = 'aggregated_class'))
rm(vessel_class)
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
grid                      <- grid[grid$LAEIPLAExt == 'LAEI',]
grid                      <- grid[,c('GRID_ID0', 'CellID')]
names(grid)               <- c('gridid', 'cellid', 'geom')
# Link grid exact cut to eimssions exact cut
grid_emissions            <- left_join(emissions, grid, by = c('cellid' = 'cellid'))
grid_emissions            <- st_set_geometry(grid_emissions, grid_emissions$geom)
rm(emissions, grid)
rm(list=lsf.str())
grid_emissions %>%
group_by.sf(pollutant, group) %>%
summarise()
grid_emissions %>%
group_by(pollutant, group) %>%
summarise()
head(grid_emissions)
grid_emissions %>%
group_by(pollutant, group) %>%
summarise(sum(sailing))
grid_emissions %>%
group_by(pollutant, group) %>%
summarise(sum(sailing), sum(berth))
head(grid_emissions)
grid_emissions[grid_emissions$group == 1 & grid_emissions$pollutant == 'NOx',]
unique(grid_emissions[,'geom'])
plot(unique(grid_emissions[,'geom']))
grid_emissions %>%
group_by(pollutant, group) %>%
summarise(sum(sailing))
grid_emissions <- grid_emissions %>%
group_by(pollutant, group, geom) %>%
summarise(sum(sailing))
temp <- grid_emissions %>%
group_by(pollutant, group) %>%
summarise(sum(sailing))
plot(temp[[1]])
plot(temp[1])
agggregate(data = as.tibble(grid_emissions), sailing ~ pollutant + group, FUN=sum)
aggregate(data = as.tibble(grid_emissions), sailing ~ pollutant + group, FUN=sum)
aggregate(data = as.tibble(grid_emissions), sailing ~ pollutant + group + geom, FUN=sum)
aggregate(data = grid_emissions, sailing ~ pollutant + group + geom, FUN=sum)
library(sf)
thames_one <- read_sf('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/london_msoa.geojson')
# Result is 983 polygons
thames_two <- read_sf('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/london_msoa.geojson')
# Reuslt is 983 polygons
thames     <- rbind(thames_one, thames_two)
# Result is 1966 polygons (983 x 2)
thames     <- thames[,c('MSOA_CODE', 'POPEAST')]
# Remove some unnecesssary content
unique(thames[,'geometry'])
# 983 features
thames %>%
group_by(MSOA_CODE) %>%
summarise(sum(POPEAST))
thames %>%
group_by(MSOA_CODE) %>%
summarise(
)
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
latlong = "+init=epsg:4326"
ukgrid = "+init=epsg:27700"
google = "+init=epsg:3857"
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]), by = c('ship_type' = 'aggregated_class'))
rm(vessel_class)
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
grid                      <- grid[grid$LAEIPLAExt == 'LAEI',]
grid                      <- grid[,c('GRID_ID0', 'CellID')]
names(grid)               <- c('gridid', 'cellid', 'geom')
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
## Script to process river emissions and GPS data.
## Key datasets
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid = "+init=epsg:27700"
google = "+init=epsg:3857"
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]), by = c('ship_type' = 'aggregated_class'))
rm(vessel_class)
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
grid                      <- grid[grid$LAEIPLAExt == 'LAEI',]
grid                      <- grid[,c('GRID_ID0', 'CellID')]
names(grid)               <- c('gridid', 'cellid', 'geom')
grid_emissions            <- left_join(emissions, grid, by = c('cellid' = 'cellid'))
grid_emissions            <- st_set_geometry(grid_emissions, grid_emissions$geom)
rm(emissions, grid)
grid_emissions  <- filter(grid_emissions, pollutant == 'NOx' & group == 2)
head(grid_emissions)
test_data <- grid_emissions[,c('pollutant', 'sailing')]
plot(test_data)
summary(test_data)
st_write(test_data, 'test_data.gpkg')
test_data <- grid_emissions[,c('pollutant', 'sailing', 'group')]
st_write(test_data, 'test_data.gpkg')
st_write(test_data, 'test_data.gpkg', overwrite=YES)
st_write(test_data, 'test_data.gpkg', overwrite=T)
st_write(test_data, 'delete_dsn = T)
st_write(test_data, 'test_data.gpkg', delete_dsn = T)
head(test_data)
unique(test_data[,'geom'])
now(unique(test_data[,'geom']))
nrow(unique(test_data[,'geom']))
head(test_data)
result <- test_data %>%
group_by(pollutant, group) %>%
summarise(sailing = sum(sailing))
result
result <- test_data %>%
group_by(pollutant, group,geom) %>%
summarise(sailing = sum(sailing))
nrow(unique(test_data[,c('group',geom']))
)
nrow(unique(test_data[,c('group','geom']))
nrow(unique(test_data[,c('group','geom')]))
test_data$pollutant
unique(test_data$pollutant)
test_data <- grid_emissions[,c('sailing', 'group')]
st_write(test_data, 'test_data.gpkg', delete_dsn = T)
unique(test_data)
unique(test_data[,c('group', 'geom')])
result <- test_data %>%
group_by(group) %>%
summarise(sailing = sum(sailing))
result
head(test_data)
test_data %>%
group_by(group) %>%
summarise(sailing = sum(sailing))
test_data <- st_read('https://github.com/JimShady/laei_river_data/raw/master/test_data.gpkg')
test_data %>%
group_by(group) %>%
summarise(sailing = sum(sailing))
head(result)
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(mapview)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]), by = c('ship_type' = 'aggregated_class'))
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
grid                      <- grid[grid$LAEIPLAExt == 'LAEI',]
grid                      <- grid[,c('GRID_ID0', 'CellID')]
names(grid)               <- c('gridid', 'cellid', 'geom')
# Link grid exact cut to eimssions exact cut, and remove some unncecessary data
grid_emissions            <- left_join(emissions, grid, by = c('cellid' = 'cellid'))
grid_emissions            <- st_set_geometry(grid_emissions, grid_emissions$geom)
grid_emissions$ship_type  <- NULL
grid_emissions$cellid     <- NULL
grid_emissions$gridid     <- NULL
rm(emissions, grid)
# The emissions are split by ship_type, but we can do it by 'group' instead. So need to aggregate .
grid_emissions$geom_group <- sapply(st_equals(grid_emissions), max)
grid_emissions            <- grid_emissions %>%
group_by(geom_group, pollutant, group) %>%
summarise(sailing = sum(sailing),
berth   = sum(berth))
grid_emissions$geom_group <- NULL
grid_emissions$id         <- 1:nrow(grid_emissions)
## Get GPS data
## list GPS data
list_of_gps_data          <- list.files('gps/', full.names=T, pattern = 'Rdata')
#for (i in 1:length(list_of_gps_data)) {
for (i in 1:5) {
print(paste0('starting ', list_of_gps_data[i]))
load(list_of_gps_data[i])
gps_data                                <- data
rm(data)
gps_data                                <- st_as_sf(gps_data, coords = c('lon', 'lat'), crs = 4326) %>%
st_transform(27700) %>%
filter(!is.na(VESSEL_TYPE)) %>%
left_join(vessel_class, by = c('VESSEL_TYPE' = 'code')) %>%
select(group)
# Count, over the year in total, how many GPS points there are in each large grid square
gps_per_grid_id                         <- st_join(gps_data, grid_emissions[,c('id')])
gps_per_grid_id                         <- data.frame(table(gps_per_grid_id$id))
names(gps_per_grid_id)                  <- c('grid_id', 'total_daily_gps_count')
gps_per_grid_id$grid_id                 <- as.integer(gps_per_grid_id$grid_id)
grid_emissions                          <- left_join(grid_emissions, gps_per_grid_id, by = c("id" = "grid_id"))
if (i == 1) {
grid_emissions$total_annual_gps_count <- grid_emissions$total_daily_gps_count
grid_emissions$total_daily_gps_count  <- NULL
rm(gps_per_grid_id)
} else {
grid_emissions$total_annual_gps_count <- grid_emissions$total_annual_gps_count + grid_emissions$total_daily_gps_count
grid_emissions$total_daily_gps_count  <- NULL
rm(gps_per_grid_id)
}
rm(gps_data)
print(paste0('ended ', list_of_gps_data[i]))
}
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(mapview)
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
#library(mapview)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]), by = c('ship_type' = 'aggregated_class'))
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
grid                      <- grid[grid$LAEIPLAExt == 'LAEI',]
grid                      <- grid[,c('GRID_ID0', 'CellID')]
names(grid)               <- c('gridid', 'cellid', 'geom')
# Link grid exact cut to eimssions exact cut, and remove some unncecessary data
grid_emissions            <- left_join(emissions, grid, by = c('cellid' = 'cellid'))
grid_emissions            <- st_set_geometry(grid_emissions, grid_emissions$geom)
grid_emissions$ship_type  <- NULL
grid_emissions$cellid     <- NULL
grid_emissions$gridid     <- NULL
rm(emissions, grid)
# The emissions are split by ship_type, but we can do it by 'group' instead. So need to aggregate .
grid_emissions$geom_group <- sapply(st_equals(grid_emissions), max)
grid_emissions            <- grid_emissions %>%
group_by(geom_group, pollutant, group) %>%
summarise(sailing = sum(sailing),
berth   = sum(berth))
grid_emissions$geom_group <- NULL
grid_emissions$id         <- 1:nrow(grid_emissions)
## Get GPS data
## list GPS data
list_of_gps_data          <- list.files('gps/', full.names=T, pattern = 'Rdata')
#for (i in 1:length(list_of_gps_data)) {
for (i in 1:5) {
print(paste0('starting ', list_of_gps_data[i]))
load(list_of_gps_data[i])
gps_data                                <- data
rm(data)
gps_data                                <- st_as_sf(gps_data, coords = c('lon', 'lat'), crs = 4326) %>%
st_transform(27700) %>%
filter(!is.na(VESSEL_TYPE)) %>%
left_join(vessel_class, by = c('VESSEL_TYPE' = 'code')) %>%
select(group)
# Count, over the year in total, how many GPS points there are in each large grid square
gps_per_grid_id                         <- st_join(gps_data, grid_emissions[,c('id')])
gps_per_grid_id                         <- data.frame(table(gps_per_grid_id$id))
names(gps_per_grid_id)                  <- c('grid_id', 'total_daily_gps_count')
gps_per_grid_id$grid_id                 <- as.integer(gps_per_grid_id$grid_id)
grid_emissions                          <- left_join(grid_emissions, gps_per_grid_id, by = c("id" = "grid_id"))
if (i == 1) {
grid_emissions$total_annual_gps_count <- grid_emissions$total_daily_gps_count
grid_emissions$total_daily_gps_count  <- NULL
rm(gps_per_grid_id)
} else {
grid_emissions$total_annual_gps_count <- grid_emissions$total_annual_gps_count + grid_emissions$total_daily_gps_count
grid_emissions$total_daily_gps_count  <- NULL
rm(gps_per_grid_id)
}
rm(gps_data)
print(paste0('ended ', list_of_gps_data[i]))
}
library(sf)
library("sf", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("sf")
install.packages("sf")
install.packages("sf")
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(mapview)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]), by = c('ship_type' = 'aggregated_class'))
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
grid                      <- grid[grid$LAEIPLAExt == 'LAEI',]
grid                      <- grid[,c('GRID_ID0', 'CellID')]
names(grid)               <- c('gridid', 'cellid', 'geom')
# Link grid exact cut to eimssions exact cut, and remove some unncecessary data
grid_emissions            <- left_join(emissions, grid, by = c('cellid' = 'cellid'))
grid_emissions            <- st_set_geometry(grid_emissions, grid_emissions$geom)
grid_emissions$ship_type  <- NULL
grid_emissions$cellid     <- NULL
grid_emissions$gridid     <- NULL
rm(emissions, grid)
# The emissions are split by ship_type, but we can do it by 'group' instead. So need to aggregate .
grid_emissions$geom_group <- sapply(st_equals(grid_emissions), max)
grid_emissions            <- grid_emissions %>%
group_by(geom_group, pollutant, group) %>%
summarise(sailing = sum(sailing),
berth   = sum(berth))
grid_emissions$geom_group <- NULL
grid_emissions$id         <- 1:nrow(grid_emissions)
## Get GPS data
## list GPS data
list_of_gps_data          <- list.files('gps/', full.names=T, pattern = 'Rdata')
#for (i in 1:length(list_of_gps_data)) {
for (i in 1:5) {
print(paste0('starting ', list_of_gps_data[i]))
load(list_of_gps_data[i])
gps_data                                <- data
rm(data)
gps_data                                <- st_as_sf(gps_data, coords = c('lon', 'lat'), crs = 4326) %>%
st_transform(27700) %>%
filter(!is.na(VESSEL_TYPE)) %>%
left_join(vessel_class, by = c('VESSEL_TYPE' = 'code')) %>%
select(group)
# Count, over the year in total, how many GPS points there are in each large grid square
gps_per_grid_id                         <- st_join(gps_data, grid_emissions[,c('id')])
gps_per_grid_id                         <- data.frame(table(gps_per_grid_id$id))
names(gps_per_grid_id)                  <- c('grid_id', 'total_daily_gps_count')
gps_per_grid_id$grid_id                 <- as.integer(gps_per_grid_id$grid_id)
grid_emissions                          <- left_join(grid_emissions, gps_per_grid_id, by = c("id" = "grid_id"))
if (i == 1) {
grid_emissions$total_annual_gps_count <- grid_emissions$total_daily_gps_count
grid_emissions$total_daily_gps_count  <- NULL
rm(gps_per_grid_id)
} else {
grid_emissions$total_annual_gps_count <- grid_emissions$total_annual_gps_count + grid_emissions$total_daily_gps_count
grid_emissions$total_daily_gps_count  <- NULL
rm(gps_per_grid_id)
}
rm(gps_data)
print(paste0('ended ', list_of_gps_data[i]))
}
Sys.getenv()
install.packages("sf")
remove.packages("sf", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("sf")
install.packages("sf")
library(sf)
install.packages(sf)
install.packages('sf')
