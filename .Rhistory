theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
plot <- ggplot() +
geom_sf(data = temp) +
geom_sf(data = test_gps, alpha=0.3, size=0.5, colour='blue') +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
ggsave('one_day_gps_example.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
small_grid <- read_csv('results/shipping_emissions_20m.csv') %>%
st_as_sf(coords = c("x", "y"), crs=27700) %>%
st_buffer(dist = 10, endCapStyle= "SQUARE")
small_grid
ggplot(data=small_grid[1:100,]) + geom_sf()
ggplot(data=small_grid) + geom_sf()
ggplot(data=filter(small_grid, group == 1)) + geom_sf()
ggplot(data=filter(small_grid, group == 1)) + geom_sf() + coord_sf(xlim = c(529035, 533671), ylim = c(179149, 181052))
ggplot(data=filter(small_grid, group == 1)) + geom_sf() + coord_sf(xlim = c(531035, 533671), ylim = c(179149, 181052))
ggplot(data=filter(small_grid, group == 1)) + geom_sf() + coord_sf(xlim = c(529535, 533671), ylim = c(180149, 181052))
ggplot(data=filter(small_grid, group == 1)) + geom_sf() + coord_sf(xlim = c(529635, 533671), ylim = c(180049, 181052))
ggplot(data=filter(small_grid, group == 1)) + geom_sf() + coord_sf(xlim = c(529735, 533671), ylim = c(180049, 181052))
small_grid <- read_csv('results/shipping_emissions_20m.csv') %>%
st_as_sf(coords = c("x", "y"), crs=27700) %>%
st_buffer(dist = 10, endCapStyle= "SQUARE")
small_grid <- filter(small_grid, group == 1 & !is.na(no2) & no2 > 0)
labels <-  list()
for (i in 1:5) {
labels[[i]]                   <- paste(round(quantile(small_grid$no2,seq(0,1,0.2))[i],3),
'-',
round(quantile(small_grid$no2,seq(0,1,0.2))[(i+1)],3))
}
labels                          <- unlist(labels)
small_grid$emissions <- cut(small_grid$no2,
breaks=c(0,quantile(small_grid$no2,seq(0,1,0.2))[2:10]),
labels = labels)
colours <- c('#ffffd4','#fed98e','#fe9929','#d95f0e','#993404')
ggplot() +
geom_sf(data = temp) +
geom_sf(data = small_grid,colour = 'black', aes(fill = emissions)) +
coord_sf(xlim = c(529735, 533671), ylim = c(180049, 181052)) +
scale_fill_manual(values = colours, name = "NOx emissions (kg/year)") +
#scale_fill_discrete(name = expression(paste("NOx emissions (", mu, m^2, "/", m^3, ")", sep=""))) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
plot <- ggplot() +
geom_sf(data = temp) +
geom_sf(data = small_grid,colour = 'black', aes(fill = emissions)) +
coord_sf(xlim = c(529735, 533671), ylim = c(180049, 181052)) +
scale_fill_manual(values = colours, name = "NO2 emissions (kg/year)") +
#scale_fill_discrete(name = expression(paste("NOx emissions (", mu, m^2, "/", m^3, ")", sep=""))) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
ggsave('small_grid_passenger_no2_emissions_example.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
rm(plot, small_grid, colours, i, labels)
small_grid <- read_csv('results/shipping_emissions_20m.csv') %>%
st_as_sf(coords = c("x", "y"), crs=27700) %>%
st_buffer(dist = 10, endCapStyle= "SQUARE")
small_grid <- filter(small_grid, group == 1 & !is.na(no2) & no2 > 0)
labels <-  list()
for (i in 1:5) {
labels[[i]]                   <- paste(round(quantile(small_grid$no2,seq(0,1,0.2))[i],3),
'-',
round(quantile(small_grid$no2,seq(0,1,0.2))[(i+1)],3))
}
labels                          <- unlist(labels)
small_grid$emissions <- cut(small_grid$no2,
breaks=c(0,quantile(small_grid$no2,seq(0,1,0.2))[2:10]),
labels = labels)
colours <- c('#ffffd4','#fed98e','#fe9929','#d95f0e','#993404')
plot <- ggplot() +
geom_sf(data = temp) +
geom_sf(data = small_grid,lwd =0, aes(fill = emissions)) +
coord_sf(xlim = c(529735, 533671), ylim = c(180049, 181052)) +
scale_fill_manual(values = colours, name = "NO2 emissions (kg/year)") +
#scale_fill_discrete(name = expression(paste("NOx emissions (", mu, m^2, "/", m^3, ")", sep=""))) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
ggsave('small_grid_passenger_no2_emissions_example.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
rm(plot, small_grid, colours, i, labels)
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
library(fasterize)
library(raster)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
head(emissions)
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
ggplot() + geom_sf(data=grid)
grid
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
library(fasterize)
library(raster)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
temp                      <- left_join(emissions, grid, by = c('cellid' = 'CellID')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD) %>%
dplyr::select(cellid, ship_type,large_grid_id, x, y, pollutant, group, sailing, berth)
temp
mapview(grid)
library(mapview)
mapview(grid)
temp <- left_join(grid, emissions, , by = c('cellid' = 'CellID'))
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
library(fasterize)
library(raster)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
# Make map of emissions before aggregating
left_join(grid, emissions)
left_join(grid, emissions,  by = c('cellid' = 'CellID'))
head(grid)
left_join(grid, emissions,  by = c('CellID' = 'cellid'))
mapview(left_join(grid, emissions,  by = c('CellID' = 'cellid')))
# Now aggregte
emissions <- emissions %>%
dplyr::select(-ship_type) %>%
group_by(pollutant, cellid, group) %>%
summarise(sailing = sum(sailing, na.rm=T),
berth   = sum(berth, na.rm=T)) %>%
ungroup()
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
library(fasterize)
library(raster)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
## Make a map showing the exaxt cut issue
temp                      <-  left_join(grid, emissions,  by = c('CellID' = 'cellid'))
temp
## Make a map showing the exaxt cut issue
temp                      <-  left_join(grid, emissions,  by = c('CellID' = 'cellid')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD) %>%
dplyr::select(cellid, ship_type,large_grid_id, x, y, pollutant, group, sailing, berth)
temp
temp                      <-  left_join(grid, emissions,  by = c('CellID' = 'cellid')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD) %>%
dplyr::select(cellid, ship_type,large_grid_id, x, y, pollutant, group, sailing, berth)
ggplot(temp) +
geom_sf() +
coord_sf(xlim = c(529735, 533671), ylim = c(180049, 181052))
temp                      <-  left_join(grid, emissions,  by = c('CellID' = 'cellid')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD)
ggplot(temp) +
geom_sf() +
coord_sf(xlim = c(529735, 533671), ylim = c(180049, 181052))
temp
class(temp)
ggplot() +
geom_sf(data = temp)
ggplot() +
geom_sf(data = temp) +
coord_sf(xlim = c(529735, 533671), ylim = c(180049, 181052))
ggplot() +
geom_sf(data = temp, aes(colour = sailing)) +
coord_sf(xlim = c(529735, 533671), ylim = c(180049, 181052))
ggplot() +
geom_sf(data = temp, aes(fill = sailing)) +
coord_sf(xlim = c(529735, 533671), ylim = c(180049, 181052))
ggplot() +
geom_sf(data = temp, aes(fill = as.factor(sailing))) +
coord_sf(xlim = c(529735, 533671), ylim = c(180049, 181052))
extent(529735, 533671, 180049, 181052)
as(extent(529735, 533671, 180049, 181052), 'Spatial')
as(extent(529735, 533671, 180049, 181052), 'SpatialPolygon')
c(529735, 180049, 533671, 181052)
st_crop(temp, c(529735, 180049, 533671, 181052))
raster::extent((529735, 180049, 533671, 181052))
raster::extent(529735, 180049, 533671, 181052)
raster::extent(529735, 533671, 180049, 181052)
as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons')
st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons'))
st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons'), crs=27700)
st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons'), CRS=27700)
st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons'))
st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons'), crs = 27700)
st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons')) %>% st_set_crs(27700)
ggplot() +
geom_sf(data = st_crop(temp, focus_area))
focus_area                <- st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons')) %>%
st_set_crs(27700)
ggplot() +
geom_sf(data = st_crop(temp, focus_area))
temp                      <- st_crop(temp, focus_area)
ggplot() +
geom_sf(data = temp)
ggplot() +
geom_sf(data = temp, aes(fill = sailing))
ggplot() +
geom_sf(data = temp, aes(fill = as.character(sailing)))
temp
names(temp)
head(temp)
temp                      <-  left_join(grid, emissions,  by = c('CellID' = 'cellid')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD)
focus_area                <- st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons')) %>%
st_set_crs(27700)
temp                      <- st_crop(temp, focus_area) %>% filter(pollutant = 'NOx'
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
library(fasterize)
library(raster)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
## Make a map showing the exaxt cut issue
temp                      <-  left_join(grid, emissions,  by = c('CellID' = 'cellid')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD)
focus_area                <- st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons')) %>%
st_set_crs(27700)
temp                      <- st_crop(temp, focus_area) %>% filter(pollutant = 'NOx')
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
library(fasterize)
library(raster)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
## Make a map showing the exaxt cut issue
temp                      <-  left_join(grid, emissions,  by = c('CellID' = 'cellid')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD)
focus_area                <- st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons')) %>%
st_set_crs(27700)
temp                      <- st_crop(temp, focus_area) %>% filter(pollutant == 'NOx')
temp
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
library(fasterize)
library(raster)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
## Make a map showing the exaxt cut issue
temp                      <-  left_join(grid, emissions,  by = c('CellID' = 'cellid')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD)
focus_area                <- st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons')) %>%
st_set_crs(27700)
temp                      <- st_crop(temp, focus_area) %>% filter(pollutant == 'NOx' & ship_type == 'Passenger (ferry)')
ggplot() +
geom_sf(data = temp, aes(fill = as.character(sailing)))
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
library(fasterize)
library(raster)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
## Make a map showing the exaxt cut issue
temp                      <-  left_join(grid, emissions,  by = c('CellID' = 'cellid')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD)
focus_area                <- st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons')) %>%
st_set_crs(27700)
temp                      <- st_crop(temp, focus_area) %>% filter(pollutant == 'NOx' & ship_type == 'Passenger (ferry)') %>%
order_by(sailing)
ggplot() +
geom_sf(data = temp, aes(fill = as.character(sailing)))
plot(1:10, 1:10)
dev,off()
