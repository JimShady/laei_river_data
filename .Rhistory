grid_emissions              <- left_join(emissions, grid, by = c('cellid' = 'cellid'))
grid_emissions              <- st_set_geometry(grid_emissions, grid_emissions$geom)
rm(emissions, grid)
head(gps_data)
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
## Script to process river emissions and GPS data.
## Key datasets
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid = "+init=epsg:27700"
google = "+init=epsg:3857"
## Get GPS data for one day of boats
load('gps/Gravesend_ANSData_01_Apr_2016.Rdata')
gps_data                <- data
rm(data)
coordinates(gps_data)   <- ~lon+lat
proj4string(gps_data)   <- CRS(latlong)
gps_data                <- spTransform(gps_data, CRS(ukgrid))
gps_data                <- st_as_sf(gps_data)
gps_data                <- gps_data %>% st_set_crs(27700)
## Import the ship classifications and link to the gps_data
vessel_class <- read_csv('docs/vessel_classifications.csv')
vessel_class <- as.factor(vessel_class$group)
gps_data     <- left_join(gps_data, vessel_class, by = c('VESSEL_TYPE' = 'code'))
## Remove data from GPS data that we don't need
gps_data       <- gps_data[,c('group')]
gps_data$group <- as.factor(gps_data$group)
# Get emissions by exact cut, substance and vessel type
emissions                   <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                   <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                   <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID            <- as.numeric(emissions$CellID)
names(emissions)            <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want          <- c('PM', 'PM2.5', 'NOx')
emissions                   <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
vessel_class
## Import the ship classifications and link to the gps_data
vessel_class            <- read_csv('docs/vessel_classifications.csv')
vessel_class$group      <- as.factor(vessel_class$group)
# Add vessel group type to the emissions, for matching with GPS data
emissions                   <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]), by = c('ship_type' = 'aggregated_class'))
rm(vessel_class)
head(emissions)
# Now get the grid by exact cut
grid                        <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
grid                        <- grid[grid$LAEIPLAExt == 'LAEI',]
grid                        <- grid[,c('GRID_ID0', 'CellID')]
names(grid)                 <- c('gridid', 'cellid', 'geom')
# Link grid exact cut to eimssions exact cut
grid_emissions              <- left_join(emissions, grid, by = c('cellid' = 'cellid'))
grid_emissions              <- st_set_geometry(grid_emissions, grid_emissions$geom)
rm(emissions, grid)
head(gps_data)
head(grid_emissions)
head(gps_data)
head(gps_data)
class(gps_data$VESSEL_TYPE)
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
## Script to process river emissions and GPS data.
## Key datasets
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid = "+init=epsg:27700"
google = "+init=epsg:3857"
## Get GPS data for one day of boats
load('gps/Gravesend_ANSData_01_Apr_2016.Rdata')
gps_data                <- data
rm(data)
coordinates(gps_data)   <- ~lon+lat
proj4string(gps_data)   <- CRS(latlong)
gps_data                <- spTransform(gps_data, CRS(ukgrid))
gps_data                <- st_as_sf(gps_data)
gps_data                <- gps_data %>% st_set_crs(27700)
gps_data$VESSEL_TYPE    <- as.factor(gps_data$VESSEL_TYPE)
head(gps_data)
## Import the ship classifications and link to the gps_data
vessel_class            <- read_csv('docs/vessel_classifications.csv')
vessel_class$group      <- as.factor(vessel_class$group)
head(vessel_class)
head(gps_data)
gps_data                <- left_join(gps_data, vessel_class, by = c('VESSEL_TYPE' = 'code'))
head(vessel_class)
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
## Script to process river emissions and GPS data.
## Key datasets
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid = "+init=epsg:27700"
google = "+init=epsg:3857"
## Get GPS data for one day of boats
load('gps/Gravesend_ANSData_01_Apr_2016.Rdata')
gps_data                <- data
rm(data)
coordinates(gps_data)   <- ~lon+lat
proj4string(gps_data)   <- CRS(latlong)
gps_data                <- spTransform(gps_data, CRS(ukgrid))
gps_data                <- st_as_sf(gps_data)
gps_data                <- gps_data %>% st_set_crs(27700)
gps_data$VESSEL_TYPE    <- as.factor(gps_data$VESSEL_TYPE)
## Import the ship classifications and link to the gps_data
vessel_class            <- read_csv('docs/vessel_classifications.csv')
vessel_class$code       <- as.factor(vessel_class$code)
gps_data                <- left_join(gps_data, vessel_class, by = c('VESSEL_TYPE' = 'code'))
class(vessel_class$code)
class(gps_data$VESSEL_TYPE
)
gps_data$VESSEL_TYPE    <- as.factor(gps_data$VESSEL_TYPE)
class(gps_data$VESSEL_TYPE)
head(gps_data)
gps_data[is.na(gps_data$group),]
## Get GPS data for one day of boats
load('gps/Gravesend_ANSData_01_Apr_2016.Rdata')
head(data)
gps_data                <- data
rm(data)
coordinates(gps_data)   <- ~lon+lat
proj4string(gps_data)   <- CRS(latlong)
gps_data                <- spTransform(gps_data, CRS(ukgrid))
gps_data                <- st_as_sf(gps_data)
gps_data                <- gps_data %>% st_set_crs(27700)
gps_data$VESSEL_TYPE    <- as.factor(gps_data$VESSEL_TYPE)
class(gps_data$VESSEL_TYPE)
## Import the ship classifications and link to the gps_data
vessel_class            <- read_csv('docs/vessel_classifications.csv')
vessel_class$code       <- as.factor(vessel_class$code)
head(gps_data)
head(gps_data)
unique(gps_data$VESSEL_TYPE)
head(gps_data[is.na(gps_data$VESSEL_TYPE),])
nrow(gps_data[is.na(gps_data$VESSEL_TYPE),])
length(unique(gps_data[is.na(gps_data$VESSEL_TYPE),'MNSI']))
length(unique(gps_data[is.na(gps_data$VESSEL_TYPE),'MMSI']))
gps_data                <- gps_data[is.na(gps_data$VESSEL_TYPE),]
head(gps_data)
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
## Script to process river emissions and GPS data.
## Key datasets
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid = "+init=epsg:27700"
google = "+init=epsg:3857"
## Get GPS data for one day of boats
load('gps/Gravesend_ANSData_01_Apr_2016.Rdata')
gps_data                <- data
rm(data)
coordinates(gps_data)   <- ~lon+lat
proj4string(gps_data)   <- CRS(latlong)
gps_data                <- spTransform(gps_data, CRS(ukgrid))
gps_data                <- st_as_sf(gps_data)
gps_data                <- gps_data %>% st_set_crs(27700)
gps_data$VESSEL_TYPE    <- as.factor(gps_data$VESSEL_TYPE)
gps_data                <- gps_data[!is.na(gps_data$VESSEL_TYPE),]
## Import the ship classifications and link to the gps_data
vessel_class            <- read_csv('docs/vessel_classifications.csv')
vessel_class$code       <- as.factor(vessel_class$code)
gps_data                <- left_join(gps_data, vessel_class, by = c('VESSEL_TYPE' = 'code'))
head(gps_data)
head(gps_data[is.na(gps_data$group),])
## Remove data from GPS data that we don't need
gps_data       <- gps_data[,c('group')]
gps_data$group <- as.factor(gps_data$group)
head(gps_group)
head(gps_data)
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
## Script to process river emissions and GPS data.
## Key datasets
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid = "+init=epsg:27700"
google = "+init=epsg:3857"
## Get GPS data for one day of boats
load('gps/Gravesend_ANSData_01_Apr_2016.Rdata')
gps_data                  <- data
rm(data)
coordinates(gps_data)     <- ~lon+lat
proj4string(gps_data)     <- CRS(latlong)
gps_data                  <- spTransform(gps_data, CRS(ukgrid))
gps_data                  <- st_as_sf(gps_data)
gps_data                  <- gps_data %>% st_set_crs(27700)
gps_data$VESSEL_TYPE      <- as.factor(gps_data$VESSEL_TYPE)
gps_data                  <- gps_data[!is.na(gps_data$VESSEL_TYPE),]
## Import the ship classifications and link to the gps_data
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
gps_data                  <- left_join(gps_data, vessel_class, by = c('VESSEL_TYPE' = 'code'))
## Remove data from GPS data that we don't need
gps_data                  <- gps_data[,c('group')]
gps_data$group            <- as.character(gps_data$group)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]), by = c('ship_type' = 'aggregated_class'))
rm(vessel_class)
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
grid                      <- grid[grid$LAEIPLAExt == 'LAEI',]
grid                      <- grid[,c('GRID_ID0', 'CellID')]
names(grid)               <- c('gridid', 'cellid', 'geom')
# Link grid exact cut to eimssions exact cut
grid_emissions            <- left_join(emissions, grid, by = c('cellid' = 'cellid'))
grid_emissions            <- st_set_geometry(grid_emissions, grid_emissions$geom)
rm(emissions, grid)
head(gps_data)
select(gps_data, group == 2)
filter(gps_data, group == 2)
filter(grid_emissions, pollutant == 'NOx')
## Now want to thin things out to see how I get on.
gps_data        <- filter(gps_data, group == 2)                 # Just look at group 2
grid_emissions  <- filter(grid_emissions, pollutant == 'NOx')   # Just look at NOx emissions
head(grid_emissions)
grid_emissions  <- filter(grid_emissions, pollutant == 'NOx' & group = 2)   # Just look at NOx emissions
grid_emissions  <- filter(grid_emissions, pollutant == 'NOx' & group == 2)   # Just look at NOx emissions
head(grid_emissions)
plot(grid_emissions)
plot(st_geometry(grid_emissions))
aggregate(data = grid_emissions, geom ~ geom, FUN = NA)
aggregate(data = grid_emissions, geom ~ geom, FUN = mean)
distinct(grid_emissions$geom)
install_github("r-spatial/sf")
library(devtools)
install_github("r-spatial/sf")
library(Rcpp)
install.packages(Rcpp)
find_rtools()
install.packages("Rcpp")
find_rtools()
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
find_rtools()
library(devtools)
find_rtools()
install_github("r-spatial/sf")
library(sf)
grid_emissions[,geoemtry]
grid_emissions[,geom]
grid_emissions[,geometry]
grid_emissions[,'geometry']
head(grid_emissions)
grid_emissions[,'geom']
unique(grid_emissions[,'geom'])
plot(unique(grid_emissions[,'geom']))
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
## Script to process river emissions and GPS data.
## Key datasets
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid = "+init=epsg:27700"
google = "+init=epsg:3857"
## Get GPS data for one day of boats
load('gps/Gravesend_ANSData_01_Apr_2016.Rdata')
gps_data                  <- data
rm(data)
gps_data                  <- st_as_sf(gps_data, coords = c('lon', 'lat'), crs = 4326)
gps_data                  <- st_transform(gps_data, 27700)
gps_data                  <- gps_data[!is.na(gps_data$VESSEL_TYPE),]
## Import the ship classifications and link to the gps_data
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
gps_data                  <- left_join(gps_data, vessel_class, by = c('VESSEL_TYPE' = 'code'))
## Remove data from GPS data that we don't need
gps_data                  <- gps_data[,c('group')]
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]), by = c('ship_type' = 'aggregated_class'))
rm(vessel_class)
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
grid                      <- grid[grid$LAEIPLAExt == 'LAEI',]
grid                      <- grid[,c('GRID_ID0', 'CellID')]
names(grid)               <- c('gridid', 'cellid', 'geom')
# Link grid exact cut to eimssions exact cut
grid_emissions            <- left_join(emissions, grid, by = c('cellid' = 'cellid'))
grid_emissions            <- st_set_geometry(grid_emissions, grid_emissions$geom)
rm(emissions, grid)
gps_data        <- filter(gps_data, group == 2)                              # Just look at group 2
grid_emissions  <- filter(grid_emissions, pollutant == 'NOx' & group == 2)   # Just look at NOx emissions
grid_emissions %>%
group_by(pollutant, group) %>%
summarise(sailing = sum(sailing),
berth = sum(berth))
source('https://raw.githubusercontent.com/r-spatial/sf/master/R/join.R')
source('https://raw.githubusercontent.com/r-spatial/sf/master/R/tidyverse.R')
grid_emissions %>%
group_by.sf(pollutant, group) %>%
summarise(sailing = sum(sailing),
berth = sum(berth))
grid_emissions %>%
group_by.sf(pollutant, group)
rm(list=lsf.str())
aggregate(data = grid_emissions, sailing ~ pollutant + group, FUN=sum)
aggregate(data = grid_emissions, sailing ~ pollutant + group + geom, FUN=sum)
aggregate(data = as.data.frame(grid_emissions), sailing ~ pollutant + group + geom, FUN=sum)
library(sf)
thames_one <- read_sf('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/london_msoa.geojson')
thames_two <- read_sf('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/london_msoa.geojson')
thames     <- rbind(thames_one, thames_two)
head(thames)
thames     <- thames[,c('MOSA_CODE', 'POPEAST')]
thames     <- thames[,c('MSOA_CODE', 'POPEAST')]
head(thames)
unique(thames[,'geometry'])
thames %>%
group_by(MOSA_CODE) %>%
summarise(POPEAST = sum(POPEAST))
thames %>%
group_by(MSOA_CODE) %>%
summarise(POPEAST = sum(POPEAST))
grid_emissions %>%
group_by(pollutant, group, geom) %>%
summarise(sailing = sum(sailing),
berth = sum(berth))
as.data.frame(grid_emissions) %>%
group_by(pollutant, group) %>%
summarise(sailing = sum(sailing),
berth = sum(berth))
as.data.frame(grid_emissions) %>%
group_by(pollutant, group, geom) %>%
summarise(sailing = sum(sailing),
berth = sum(berth))
grid_emissions %>% as_tibble %>%
group_by(pollutant, group, geom) %>%
summarise(sailing = sum(sailing),
berth = sum(berth))
as_tibble.sf
as.data.frame(grid_emissions) %>%
group_by(pollutant, group, geom) %>%
summarise(sailing = sum(sailing),
berth = sum(berth),
geom = NA)
grid_emissions %>%
group_by(pollutant, group, geom) %>%
summarise(sailing = sum(sailing),
berth = sum(berth),
geom = NA)
grid_emissions %>%
group_by(pollutant, group) %>%
summarise(sailing = sum(sailing),
berth = sum(berth))
library(dplyr)
library(tidyr)
grid_emissions %>%
group_by.sf(pollutant, group) %>%
summarise(sailing = sum(sailing),
berth = sum(berth))
group_by.sf <- function(.data, ..., add = FALSE) {
class(.data) <- setdiff(class(.data), "sf")
st_as_sf(NextMethod(), sf_column_name = attr(.data, "sf_column"))
}
grid_emissions %>%
group_by.sf(pollutant, group) %>%
summarise(sailing = sum(sailing),
berth = sum(berth))
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
source('https://raw.githubusercontent.com/r-spatial/sf/master/R/join.R')
source('https://raw.githubusercontent.com/r-spatial/sf/master/R/tidyverse.R')
## Script to process river emissions and GPS data.
## Key datasets
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid = "+init=epsg:27700"
google = "+init=epsg:3857"
## Get GPS data for one day of boats
load('gps/Gravesend_ANSData_01_Apr_2016.Rdata')
gps_data                  <- data
rm(data)
gps_data                  <- st_as_sf(gps_data, coords = c('lon', 'lat'), crs = 4326)
gps_data                  <- st_transform(gps_data, 27700)
gps_data                  <- gps_data[!is.na(gps_data$VESSEL_TYPE),]
## Import the ship classifications and link to the gps_data
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
gps_data                  <- left_join(gps_data, vessel_class, by = c('VESSEL_TYPE' = 'code'))
## Remove data from GPS data that we don't need
gps_data                  <- gps_data[,c('group')]
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]), by = c('ship_type' = 'aggregated_class'))
rm(vessel_class)
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
grid                      <- grid[grid$LAEIPLAExt == 'LAEI',]
grid                      <- grid[,c('GRID_ID0', 'CellID')]
names(grid)               <- c('gridid', 'cellid', 'geom')
# Link grid exact cut to eimssions exact cut
grid_emissions            <- left_join(emissions, grid, by = c('cellid' = 'cellid'))
grid_emissions            <- st_set_geometry(grid_emissions, grid_emissions$geom)
rm(emissions, grid)
rm(list=lsf.str())
grid_emissions %>%
group_by.sf(pollutant, group) %>%
summarise()
grid_emissions %>%
group_by(pollutant, group) %>%
summarise()
head(grid_emissions)
grid_emissions %>%
group_by(pollutant, group) %>%
summarise(sum(sailing))
grid_emissions %>%
group_by(pollutant, group) %>%
summarise(sum(sailing), sum(berth))
head(grid_emissions)
grid_emissions[grid_emissions$group == 1 & grid_emissions$pollutant == 'NOx',]
unique(grid_emissions[,'geom'])
plot(unique(grid_emissions[,'geom']))
grid_emissions %>%
group_by(pollutant, group) %>%
summarise(sum(sailing))
grid_emissions <- grid_emissions %>%
group_by(pollutant, group, geom) %>%
summarise(sum(sailing))
temp <- grid_emissions %>%
group_by(pollutant, group) %>%
summarise(sum(sailing))
plot(temp[[1]])
plot(temp[1])
agggregate(data = as.tibble(grid_emissions), sailing ~ pollutant + group, FUN=sum)
aggregate(data = as.tibble(grid_emissions), sailing ~ pollutant + group, FUN=sum)
aggregate(data = as.tibble(grid_emissions), sailing ~ pollutant + group + geom, FUN=sum)
aggregate(data = grid_emissions, sailing ~ pollutant + group + geom, FUN=sum)
library(sf)
thames_one <- read_sf('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/london_msoa.geojson')
# Result is 983 polygons
thames_two <- read_sf('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/london_msoa.geojson')
# Reuslt is 983 polygons
thames     <- rbind(thames_one, thames_two)
# Result is 1966 polygons (983 x 2)
thames     <- thames[,c('MSOA_CODE', 'POPEAST')]
# Remove some unnecesssary content
unique(thames[,'geometry'])
# 983 features
thames %>%
group_by(MSOA_CODE) %>%
summarise(sum(POPEAST))
thames %>%
group_by(MSOA_CODE) %>%
summarise(
)
