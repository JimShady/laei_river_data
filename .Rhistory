# Link grid exact cut to eimssions exact cut, and remove some unncecessary data
grid_emissions            <- left_join(emissions, grid, by = c('cellid' = 'CellID')) %>%
select(cellid, GRID_ID0, X_COORD, Y_COORD, pollutant, group, sailing, berth) %>%
as.tibble() %>%
group_by(pollutant, group, GRID_ID0, X_COORD, Y_COORD) %>%
summarise(sailing = sum(sailing), berth = sum(berth)) %>%
st_as_sf(coords = c("X_COORD", "Y_COORD"), crs=27700) %>%
st_buffer(dist = 500, endCapStyle= "SQUARE")
plot(st_geometry(filter(grid_emissions, pollutant == 'NOx' & group == 1)))
ggplot(filter(grid_emissions, pollutant == 'NOx' & group == 1)) + geom_sf()
ggplot(filter(grid_emissions, pollutant == 'NOx' & group == 1)) + geom_sf(aes(fill = sailing))
ggplot(filter(grid_emissions, pollutant == 'NOx' & group == 1)) + geom_sf(aes(fill = berth))
grid_emissions
unique(grid_emissions$GRID_ID0)
table(grid_emissions$GRID_ID0)
ggplot() +
geom_sf(data = filter(grid_emissions, pollutant == 'NOx' & group == 1), colour = NA, aes(fill = sailing)) +
scale_fill_distiller(palette = 'RdYlGn')
ggplot() +
geom_sf(data = filter(grid_emissions, pollutant == 'NOx' & group == 1), colour = NA, aes(fill = berth)) +
scale_fill_distiller(palette = 'RdYlGn')
grid_emissions
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
# Now aggregte
emissions <- emissions %>%
select(-ship_type) %>%
group_by(pollutant, cellid, group) %>%
summarise(sailing = sum(sailing, na.rm=T),
berth   = sum(berth, na.rm=T)) %>%
ungroup()
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
# Link grid exact cut to eimssions exact cut, and remove some unncecessary data
grid_emissions            <- left_join(emissions, grid, by = c('cellid' = 'CellID')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD)
select(cellid, large_grid_id, x, y, pollutant, group, sailing, berth) %>%
as.tibble() %>%
group_by(pollutant, group, large_grid_id, x, y) %>%
summarise(sailing = sum(sailing), berth = sum(berth)) %>%
st_as_sf(coords = c("x", "y"), crs=27700) %>%
st_buffer(dist = 500, endCapStyle= "SQUARE")
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
# Now aggregte
emissions <- emissions %>%
select(-ship_type) %>%
group_by(pollutant, cellid, group) %>%
summarise(sailing = sum(sailing, na.rm=T),
berth   = sum(berth, na.rm=T)) %>%
ungroup()
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
# Link grid exact cut to eimssions exact cut, and remove some unncecessary data
grid_emissions            <- left_join(emissions, grid, by = c('cellid' = 'CellID')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD)
grid_emissions
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
# Now aggregte
emissions <- emissions %>%
select(-ship_type) %>%
group_by(pollutant, cellid, group) %>%
summarise(sailing = sum(sailing, na.rm=T),
berth   = sum(berth, na.rm=T)) %>%
ungroup()
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
# Link grid exact cut to eimssions exact cut, and remove some unncecessary data
grid_emissions            <- left_join(emissions, grid, by = c('cellid' = 'CellID')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD) %>%
select(cellid, large_grid_id, x, y, pollutant, group, sailing, berth) %>%
as.tibble() %>%
group_by(pollutant, group, large_grid_id, x, y) %>%
summarise(sailing = sum(sailing), berth = sum(berth)) %>%
st_as_sf(coords = c("x", "y"), crs=27700) %>%
st_buffer(dist = 500, endCapStyle= "SQUARE")
grid_emissions
rm(emissions, grid)
plot <- ggplot() +
geom_sf(data = filter(grid_emissions, pollutant == 'NOx' & group == 1), colour = NA, aes(fill = sailing)) +
scale_fill_distiller(palette = 'RdYlGn') +
ggtitle('Sailing emissions: NOx group 1')
ggsave('large_grid_sailing_group_one_nox.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
plot <- ggplot() +
geom_sf(data = filter(grid_emissions, pollutant == 'NOx' & group == 1), colour = NA, aes(fill = berth)) +
scale_fill_distiller(palette = 'RdYlGn') +
ggtitle('Berth emissions: NOx group 1')
ggsave('large_grid_berth_group_one_nox.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
unique(grid_emissions[,c('large_grid_id','geometry')])
plot(unique(grid_emissions[,c('large_grid_id','geometry')]))
rownames(grid_emissions)
## Setup the small grids
small_grid                         <- grid_emissions %>%
unique(grid_emissions[,c('large_grid_id','geometry')]) %>%
st_make_grid(cellsize = 20, what = 'polygons') %>%
st_sf() %>%
st_intersection(unique_geoms) %>%
mutate(id = row_number())
grid_emissions %>%
unique(grid_emissions[,c('large_grid_id','geometry')])
group_by(grid_emissions, large_grid_i)
group_by(grid_emissions, large_grid_id)
select(grid_emissions, large_grid_id) %>% group_by(large_grid_id)
select(grid_emissions, large_grid_id) %>% distinct(large_grid_id)
select(grid_emissions, large_grid_id) %>% distinct(large_grid_id, geoemtry)
select(grid_emissions, large_grid_id) %>% distinct.sf(large_grid_id, geoemtry)
unique(grid_emissions[,c('large_grid_id','geometry')])
## Setup the small grids
small_grid                         <- unique(grid_emissions[,c('large_grid_id','geometry')]) %>%
st_make_grid(cellsize = 20, what = 'polygons') %>%
st_sf() %>%
st_intersection(unique_geoms) %>%
mutate(id = row_number())
## Setup the small grids
small_grid                         <- unique(grid_emissions[,c('large_grid_id','geometry')]) %>%
st_make_grid(cellsize = 20, what = 'polygons') %>%
st_sf() %>%
st_intersection(unique(grid_emissions[,c('large_grid_id','geometry')])) %>%
mutate(id = row_number())
small_grid
ggplot(small_grid[1:1000,]) + geom_sf(aes(fill = large_grid_id), colour = NA)
## Make a small  grid results dataset that we'll count the GPS points into
small_grid_result         <- rbind(small_grid %>% mutate(group = 1),
small_grid %>% mutate(group = 2),
small_grid %>% mutate(group = 3),
small_grid %>% mutate(group = 4))
small_grid_result
list_of_gps_data             <- list.files('gps/', full.names=T, pattern = 'Rdata')
list_of_gps_data             <- data.frame(filename         = list_of_gps_data,
actual_date      = NA,
stringsAsFactors = F)
list_of_gps_data$actual_date <- substr(x     = list_of_gps_data$filename,
start = 24,
stop  = nchar(list_of_gps_data$filename)-6)
list_of_gps_data$actual_date <- as.Date(list_of_gps_data$actual_date, format = '%d_%b_%Y')
list_of_gps_data             <- list_of_gps_data[order(list_of_gps_data$actual_date),]
list_of_gps_data             <- as.list(list_of_gps_data$filename)
x <- list_of_gps_data[[1]]
x
load(x)
st_as_sf(data, coords = c('lon', 'lat'), crs = 4326) %>%
st_transform(27700) %>%
st_crop(st_bbox(small_grid))
gps_data                                <- st_as_sf(data, coords = c('lon', 'lat'), crs = 4326) %>%
st_transform(27700) %>%
st_crop(st_bbox(small_grid)) %>%
filter(!is.na(VESSEL_TYPE)) %>%
left_join(vessel_class, by = c('VESSEL_TYPE' = 'code')) %>%
select(group)
gps_data
rm(data)
small_grid
gps_data
small_grid
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
# Now aggregte
emissions <- emissions %>%
select(-ship_type) %>%
group_by(pollutant, cellid, group) %>%
summarise(sailing = sum(sailing, na.rm=T),
berth   = sum(berth, na.rm=T)) %>%
ungroup()
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
# Link grid exact cut to eimssions exact cut, and remove some unncecessary data
grid_emissions            <- left_join(emissions, grid, by = c('cellid' = 'CellID')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD) %>%
select(cellid, large_grid_id, x, y, pollutant, group, sailing, berth) %>%
as.tibble() %>%
group_by(pollutant, group, large_grid_id, x, y) %>%
summarise(sailing = sum(sailing), berth = sum(berth)) %>%
st_as_sf(coords = c("x", "y"), crs=27700) %>%
st_buffer(dist = 500, endCapStyle= "SQUARE")
rm(emissions, grid)
## PLOT OF NOx for group 2
plot <- ggplot() +
geom_sf(data = filter(grid_emissions, pollutant == 'NOx' & group == 1), colour = NA, aes(fill = sailing)) +
scale_fill_distiller(palette = 'RdYlGn') +
ggtitle('Sailing emissions: NOx group 1')
ggsave('large_grid_sailing_group_one_nox.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
plot <- ggplot() +
geom_sf(data = filter(grid_emissions, pollutant == 'NOx' & group == 1), colour = NA, aes(fill = berth)) +
scale_fill_distiller(palette = 'RdYlGn') +
ggtitle('Berth emissions: NOx group 1')
ggsave('large_grid_berth_group_one_nox.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
## For each grid_emissions there is one square per group and per pollutant. More data than we need for the spatial joins with the
## GPS data. So just get unique polygons. Give the unique polygons an ID. Then join these new unique polygon IDs to the full list. Like
## a left join look-up thing
## Setup the small grids
small_grid                         <- unique(grid_emissions[,c('large_grid_id','geometry')]) %>%
st_make_grid(cellsize = 20, what = 'polygons') %>%
st_sf() %>%
st_intersection(unique(grid_emissions[,c('large_grid_id','geometry')])) %>%
mutate(small_grid_id = row_number())
## Make a small  grid results dataset that we'll count the GPS points into
small_grid_result         <- rbind(small_grid %>% mutate(group = 1),
small_grid %>% mutate(group = 2),
small_grid %>% mutate(group = 3),
small_grid %>% mutate(group = 4))
## Get GPS data
list_of_gps_data             <- list.files('gps/', full.names=T, pattern = 'Rdata')
list_of_gps_data             <- data.frame(filename         = list_of_gps_data,
actual_date      = NA,
stringsAsFactors = F)
list_of_gps_data$actual_date <- substr(x     = list_of_gps_data$filename,
start = 24,
stop  = nchar(list_of_gps_data$filename)-6)
list_of_gps_data$actual_date <- as.Date(list_of_gps_data$actual_date, format = '%d_%b_%Y')
list_of_gps_data             <- list_of_gps_data[order(list_of_gps_data$actual_date),]
list_of_gps_data             <- as.list(list_of_gps_data$filename)
st_bbox(small_grid)
load(x)
gps_data                                <- st_as_sf(data, coords = c('lon', 'lat'), crs = 4326) %>%
st_transform(27700) %>%
st_crop(st_bbox(small_grid)) %>%
filter(!is.na(VESSEL_TYPE)) %>%
left_join(vessel_class, by = c('VESSEL_TYPE' = 'code')) %>%
select(group)
rm(data)
# Count, over the year in total, how many GPS points there are in each small grid square
gps_per_small_grid_id                   <- st_join(gps_data, small_grid, join = st_intersects) %>%
filter(!is.na(small_grid_id))
# Remove geoms we don't need from this count
gps_per_small_grid_id$geometry          <- NULL
# Sum up by the grid square
gps_per_small_grid_id                   <- gps_per_small_grid_id %>%
select(group, small_grid_id) %>%
group_by(small_grid_id, group) %>%
summarise(count = length(group))
list_of_gps_data[[1]]
x <0 list_of_gps_data[[1]]
x <- list_of_gps_data[[1]]
x
load(x)
gps_data                                <- st_as_sf(data, coords = c('lon', 'lat'), crs = 4326) %>%
st_transform(27700) %>%
st_crop(st_bbox(small_grid)) %>%
filter(!is.na(VESSEL_TYPE)) %>%
left_join(vessel_class, by = c('VESSEL_TYPE' = 'code')) %>%
select(group)
rm(data)
# Count, over the year in total, how many GPS points there are in each small grid square
gps_per_small_grid_id                   <- st_join(gps_data, small_grid, join = st_intersects) %>%
filter(!is.na(small_grid_id))
# Remove geoms we don't need from this count
gps_per_small_grid_id$geometry          <- NULL
# Sum up by the grid square
gps_per_small_grid_id                   <- gps_per_small_grid_id %>%
select(group, small_grid_id) %>%
group_by(small_grid_id, group) %>%
summarise(count = length(group))
gps_per_small_grid_id
save(gps_per_small_grid_id, file = paste0('grids/small_result_', substr(x = x,
start = 24,
stop = nchar(x)-6), '.Rdata'))
rm(gps_per_small_grid_id)
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
# Now aggregte
emissions <- emissions %>%
select(-ship_type) %>%
group_by(pollutant, cellid, group) %>%
summarise(sailing = sum(sailing, na.rm=T),
berth   = sum(berth, na.rm=T)) %>%
ungroup()
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
# Link grid exact cut to eimssions exact cut, and remove some unncecessary data
grid_emissions            <- left_join(emissions, grid, by = c('cellid' = 'CellID')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD) %>%
select(cellid, large_grid_id, x, y, pollutant, group, sailing, berth) %>%
as.tibble() %>%
group_by(pollutant, group, large_grid_id, x, y) %>%
summarise(sailing = sum(sailing), berth = sum(berth)) %>%
st_as_sf(coords = c("x", "y"), crs=27700) %>%
st_buffer(dist = 500, endCapStyle= "SQUARE")
rm(emissions, grid)
## PLOT OF NOx for group 2
plot <- ggplot() +
geom_sf(data = filter(grid_emissions, pollutant == 'NOx' & group == 1), colour = NA, aes(fill = sailing)) +
scale_fill_distiller(palette = 'RdYlGn') +
ggtitle('Sailing emissions: NOx group 1')
ggsave('large_grid_sailing_group_one_nox.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
plot <- ggplot() +
geom_sf(data = filter(grid_emissions, pollutant == 'NOx' & group == 1), colour = NA, aes(fill = berth)) +
scale_fill_distiller(palette = 'RdYlGn') +
ggtitle('Berth emissions: NOx group 1')
ggsave('large_grid_berth_group_one_nox.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
## For each grid_emissions there is one square per group and per pollutant. More data than we need for the spatial joins with the
## GPS data. So just get unique polygons. Give the unique polygons an ID. Then join these new unique polygon IDs to the full list. Like
## a left join look-up thing
## Setup the small grids
small_grid                         <- unique(grid_emissions[,c('large_grid_id','geometry')]) %>%
st_make_grid(cellsize = 20, what = 'polygons') %>%
st_sf() %>%
st_intersection(unique(grid_emissions[,c('large_grid_id','geometry')])) %>%
mutate(small_grid_id = row_number())
## Make a small  grid results dataset that we'll count the GPS points into
small_grid_result         <- rbind(small_grid %>% mutate(group = 1),
small_grid %>% mutate(group = 2),
small_grid %>% mutate(group = 3),
small_grid %>% mutate(group = 4))
## Get GPS data
list_of_gps_data             <- list.files('gps/', full.names=T, pattern = 'Rdata')
list_of_gps_data             <- data.frame(filename         = list_of_gps_data,
actual_date      = NA,
stringsAsFactors = F)
list_of_gps_data$actual_date <- substr(x     = list_of_gps_data$filename,
start = 24,
stop  = nchar(list_of_gps_data$filename)-6)
list_of_gps_data$actual_date <- as.Date(list_of_gps_data$actual_date, format = '%d_%b_%Y')
list_of_gps_data             <- list_of_gps_data[order(list_of_gps_data$actual_date),]
list_of_gps_data             <- as.list(list_of_gps_data$filename)
## Function to calculate how many GPS points are within each large square, and within each small grid square
process_gps_data <-  function(x) {
load(x)
gps_data                                <- st_as_sf(data, coords = c('lon', 'lat'), crs = 4326) %>%
st_transform(27700) %>%
st_crop(st_bbox(small_grid)) %>%
filter(!is.na(VESSEL_TYPE)) %>%
left_join(vessel_class, by = c('VESSEL_TYPE' = 'code')) %>%
select(group)
rm(data)
# Count, over the year in total, how many GPS points there are in each small grid square
gps_per_small_grid_id                   <- st_join(gps_data, small_grid, join = st_intersects) %>%
filter(!is.na(small_grid_id))
# Remove geoms we don't need from this count
gps_per_small_grid_id$geometry          <- NULL
# Sum up by the grid square
gps_per_small_grid_id                   <- gps_per_small_grid_id %>%
select(group, small_grid_id) %>%
group_by(small_grid_id, group) %>%
summarise(count = length(group))
save(gps_per_small_grid_id, file = paste0('grids/small_result_', substr(x = x,
start = 24,
stop = nchar(x)-6), '.Rdata'))
rm(gps_per_small_grid_id)
}
# Set-up parallel and fun above function
sfInit(parallel=TRUE, cpus=parallel:::detectCores()-1)
sfLibrary(sf)
sfLibrary(tidyverse)
sfExport(list=list("unique_geoms", "small_grid", "vessel_class"))
sfLapply(list_of_gps_data, fun=process_gps_data)
sfStop()
sfInit(parallel=TRUE, cpus=parallel:::detectCores()-1)
sfLibrary(sf)
sfLibrary(tidyverse)
sfExport(list=list("small_grid", "vessel_class"))
sfLapply(list_of_gps_data, fun=process_gps_data)
