## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
## Make a map showing the exaxt cut issue
temp                      <-  left_join(grid, emissions,  by = c('CellID' = 'cellid')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD)
focus_area                <- st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons')) %>%
st_set_crs(27700)
temp                      <- st_crop(temp, focus_area) %>%
filter(pollutant == 'NOx' & ship_type == 'Passenger (ferry)') %>%
arrange(sailing)
temp$sailing              <- factor(temp$sailing)
colourCount = length(unique(temp$sailing))
getPalette  = colorRampPalette(brewer.pal(9, "YlOrRd"))
plot <- ggplot() +
geom_sf(data = temp, aes(fill = sailing)) +
scale_fill_manual(values = getPalette(colourCount), name = "Passenger ferry NOx \n emissions (kg/year)") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank(),
legend.text = element_text(size=6),
legend.title = element_text(size=8)) +
guides(fill=guide_legend(ncol=2))
ggsave('large_grid_nox_passenger_sailing_before_merge.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
rm(plot, colourCount, getPalette, temp, focus_area)
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
library(fasterize)
library(raster)
library(RColorBrewer)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
## Make a map showing the exaxt cut issue
temp                      <-  left_join(grid, emissions,  by = c('CellID' = 'cellid')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD)
focus_area                <- st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons')) %>%
st_set_crs(27700)
temp                      <- st_crop(temp, focus_area) %>%
filter(pollutant == 'NOx' & ship_type == 'Passenger (ferry)') %>%
arrange(sailing)
temp$sailing              <- factor(temp$sailing)
colourCount = length(unique(temp$sailing))
getPalette  = colorRampPalette(brewer.pal(9, "YlOrRd"))
plot <- ggplot() +
geom_sf(data = temp, aes(fill = sailing)) +
scale_fill_manual(values = getPalette(colourCount), name = "Passenger ferry NOx \n emissions (kg/year)") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank(),
legend.text = element_text(size=6),
legend.title = element_text(size=8)) +
guides(fill=guide_legend(ncol=2),
color = guide_legend(override.aes = list(size = 0.5)))
ggsave('large_grid_nox_passenger_sailing_before_merge.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
rm(plot, colourCount, getPalette, temp, focus_area)
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
library(fasterize)
library(raster)
library(RColorBrewer)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
## Make a map showing the exaxt cut issue
temp                      <-  left_join(grid, emissions,  by = c('CellID' = 'cellid')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD)
focus_area                <- st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons')) %>%
st_set_crs(27700)
temp                      <- st_crop(temp, focus_area) %>%
filter(pollutant == 'NOx' & ship_type == 'Passenger (ferry)') %>%
arrange(sailing)
temp$sailing              <- factor(temp$sailing)
colourCount = length(unique(temp$sailing))
getPalette  = colorRampPalette(brewer.pal(9, "YlOrRd"))
plot <- ggplot() +
geom_sf(data = temp, aes(fill = sailing)) +
scale_fill_manual(values = getPalette(colourCount), name = "Passenger ferry NOx \n emissions (kg/year)") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank(),
legend.text = element_text(size=6),
legend.title = element_text(size=8)) +
guides(fill=guide_legend(ncol=2),
color = guide_legend(override.aes = list(shape = 0.5)))
ggsave('large_grid_nox_passenger_sailing_before_merge.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
rm(plot, colourCount, getPalette, temp, focus_area)
colorRampPalette(c('#ffffd4','#fed98e','#fe9929','#d95f0e','#993404'))
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
library(fasterize)
library(raster)
library(RColorBrewer)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
## Make a map showing the exaxt cut issue
temp                      <-  left_join(grid, emissions,  by = c('CellID' = 'cellid')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD)
focus_area                <- st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons')) %>%
st_set_crs(27700)
temp                      <- st_crop(temp, focus_area) %>%
filter(pollutant == 'NOx' & ship_type == 'Passenger (ferry)') %>%
arrange(sailing)
temp$sailing              <- factor(temp$sailing)
colourCount = length(unique(temp$sailing))
getPalette  = colorRampPalette(c('#ffffd4','#fed98e','#fe9929','#d95f0e','#993404'))
ggplot() +
geom_sf(data = temp, aes(fill = sailing)) +
scale_fill_manual(values = getPalette(colourCount), name = "Passenger ferry NOx \n emissions (kg/year)") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank(),
legend.text = element_text(size=6),
legend.title = element_text(size=8)) +
guides(fill=guide_legend(ncol=2),
color = guide_legend(override.aes = list(shape = 0.5)))
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
library(fasterize)
library(raster)
library(RColorBrewer)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
## Make a map showing the exaxt cut issue
temp                      <-  left_join(grid, emissions,  by = c('CellID' = 'cellid')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD)
focus_area                <- st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons')) %>%
st_set_crs(27700)
temp                      <- st_crop(temp, focus_area) %>%
filter(pollutant == 'NOx' & ship_type == 'Passenger (ferry)') %>%
arrange(sailing)
temp$sailing              <- factor(temp$sailing)
colourCount = length(unique(temp$sailing))
getPalette  = colorRampPalette(c('#ffffd4','#fed98e','#fe9929','#d95f0e','#993404'))
plot <- ggplot() +
geom_sf(data = temp, aes(fill = sailing)) +
scale_fill_manual(values = getPalette(colourCount), name = "Passenger ferry NOx \n emissions (kg/year)") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank(),
legend.text = element_text(size=6),
legend.title = element_text(size=8)) +
guides(fill=guide_legend(ncol=2),
color = guide_legend(override.aes = list(shape = 0.5)))
ggsave('large_grid_nox_passenger_sailing_before_merge.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
rm(plot, colourCount, getPalette, temp, focus_area)
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
library(fasterize)
library(raster)
library(RColorBrewer)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
emissions
vessel_class
getwd()
write_csv(vessel_class, 'temp.csv')
# Mapping the air quality output modelling of the Thames
library(raster)
library(rasterVis)
library(tidyverse)
data <- raster('#//E:/apps/LAEI2016/pm25.asc')
data <- raster('E:\apps\LAEI2016\no2.asc')
data <- raster('E:/apps/LAEI2016/no2.asc')
data
head(data)
plot(data)
focus_area                <- st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons')) %>%
st_set_crs(27700)
library(sf)
data
library(tmap)
install.packages("tmap")
library(tmap)
# Mapping the air quality output modelling of the Thames
library(raster)
library(rasterVis)
library(tidyverse)
library(sf)
library(tmap)
tmapdata <- raster('E:/apps/LAEI2016/no2.asc')
focus_area                <- st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons')) %>%
st_set_crs(27700)
tmap::tmap_shape(focus_area)
install.packages("raster")
install.packages("raster")
install.packages("raster")
install.packages("raster")
# Mapping the air quality output modelling of the Thames
library(raster)
library(rasterVis)
library(tidyverse)
library(sf)
library(tmap)
tmapdata <- raster('E:/apps/LAEI2016/no2.asc')
focus_area                <- st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons')) %>%
st_set_crs(27700)
tmap::tmap_shape(focus_area)
# Mapping the air quality output modelling of the Thames
library(raster)
library(rasterVis)
library(tidyverse)
library(sf)
library(tmap)
tmapdata <- raster('E:/apps/LAEI2016/no2.asc')
focus_area                <- st_as_sf(as(raster::extent(529735, 533671, 180049, 181052), 'SpatialPolygons')) %>%
st_set_crs(27700)
install.packages("raster")
data <- read_csv('shipping_profile.csv')
library(dplyr)
data <- read_csv('shipping_profile.csv')
library(tidyverse)
data <- read_csv('shipping_profile.csv')
data
ggplot(data, aes(hour, records, group = wday)) +
geom_line()
data <- read_csv('shipping_profile.csv') %>%
mutate(total = sum(records))
data
data <- read_csv('shipping_profile.csv') %>%
mutate(total = sum(records)) %>%
mutate(ratio = records/total)
data
ggplot(data, aes(hour, ratio, group = wday)) +
geom_line()
ggplot(data, aes(hour, ratio, group = wday)) +
geom_line() +
scale_x_continuous(breaks = 0:23)
ggplot(data, aes(hour, ratio, group = wday, colour = wday)) +
geom_line() +
scale_x_continuous(breaks = 0:23) +
xlab('Ratio') +
ylab('Hour of the day')
ggplot(data, aes(hour, ratio, group = wday, colour = wday)) +
geom_line() +
scale_x_continuous(breaks = 0:23) +
xlab('Ratio') +
ylab('Hour of the day') +
theme(legend.title = elememt_blank())
ggplot(data, aes(hour, ratio, group = wday, colour = wday)) +
geom_line() +
scale_x_continuous(breaks = 0:23) +
xlab('Ratio') +
ylab('Hour of the day') +
theme(legend.title = element_blank())
ggplot(data, aes(hour, ratio, group = wday, colour = wday)) +
geom_line(size=2) +
scale_x_continuous(breaks = 0:23) +
xlab('Ratio') +
ylab('Hour of the day') +
theme(legend.title = element_blank(),
axis.grid.minor = element_blank())
ggplot(data, aes(hour, ratio, group = wday, colour = wday)) +
geom_line(size=2) +
scale_x_continuous(breaks = 0:23) +
xlab('Ratio') +
ylab('Hour of the day') +
theme(legend.title = element_blank(),
panel.grid.minor = element_blank())
ggplot(data, aes(hour, ratio, group = wday, colour = wday)) +
geom_line(size=1) +
scale_x_continuous(breaks = 0:23) +
xlab('Ratio') +
ylab('Hour of the day') +
theme(legend.title = element_blank(),
panel.grid.minor = element_blank())
ggplot(data, aes(hour, ratio, group = wday, colour = wday)) +
geom_line(size=1) +
scale_x_continuous(breaks = 0:23) +
xlab('Ratio') +
ylab('Hour of the day') +
theme(legend.title = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(colour='black'))
read_csv('shipping_profile.csv') %>%
mutate(total = sum(records)) %>%
mutate(ratio = records/total) %>%
ggplot(aes(hour, ratio, group = wday, colour = wday)) +
geom_line(size=1) +
scale_x_continuous(breaks = 0:23) +
xlab('Ratio') +
ylab('Hour of the day') +
theme(legend.title = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(colour='black'))
library(tidyverse)
plot <- read_csv('shipping_profile.csv') %>%
mutate(total = sum(records)) %>%
mutate(ratio = records/total) %>%
ggplot(aes(hour, ratio, group = wday, colour = wday)) +
geom_line(size=1) +
scale_x_continuous(breaks = 0:23) +
xlab('Ratio') +
ylab('Hour of the day') +
theme(legend.title = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(colour='black'))
png("diurnal_variation.png", width=15, height=5, units='cm')
plot(plot)
dev.off()
library(tidyverse)
plot <- read_csv('shipping_profile.csv') %>%
mutate(total = sum(records)) %>%
mutate(ratio = records/total) %>%
ggplot(aes(hour, ratio, group = wday, colour = wday)) +
geom_line(size=1) +
scale_x_continuous(breaks = 0:23) +
xlab('Ratio') +
ylab('Hour of the day') +
theme(legend.title = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(colour='black'))
png("maps/diurnal_variation.png", width=15, height=5, units='cm', res=300)
plot(plot)
dev.off()
dev.off()
library(tidyverse)
plot <- read_csv('shipping_profile.csv') %>%
mutate(total = sum(records)) %>%
mutate(ratio = records/total) %>%
ggplot(aes(hour, ratio, group = wday, colour = wday)) +
geom_line(size=1) +
scale_x_continuous(breaks = 0:23) +
xlab('Hour of the day') +
ylab('Ratio') +
theme(legend.title = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(colour='black'))
png("maps/diurnal_variation.png", width=15, height=5, units='cm', res=300)
plot(plot)
dev.off()
