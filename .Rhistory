st_buffer(dist = 500, endCapStyle= "SQUARE")
rm(emissions, grid)
## PLOT OF NOx for group 1 sailing
#####
nox_group_one_sailing <- filter(grid_emissions, pollutant == 'NOx' & group == 1 & !is.na(sailing) & sailing > 0) %>%
dplyr::select(sailing)
labels <-  list()
for (i in 1:5) {
labels[[i]]                   <- paste(round(quantile(nox_group_one_sailing$sailing,seq(0,1,0.2))[i],0),
'-',
round(quantile(nox_group_one_sailing$sailing,seq(0,1,0.2))[(i+1)],0))
}
labels                          <- unlist(labels)
nox_group_one_sailing$emissions <- cut(nox_group_one_sailing$sailing,
breaks=c(0,quantile(nox_group_one_sailing$sailing,seq(0,1,0.2))[2:10]),
labels = labels)
colours <- c('#ffffd4','#fed98e','#fe9929','#d95f0e','#993404')
plot <- ggplot() +
geom_sf(data = temp) +
geom_sf(data = nox_group_one_sailing, colour = 'black', aes(fill = emissions)) +
coord_sf() +
scale_fill_manual(values = colours, name = "NOx emissions (kg/year)") +
#scale_fill_discrete(name = expression(paste("NOx emissions (", mu, m^2, "/", m^3, ")", sep=""))) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
ggsave('large_grid_sailing_group_one_nox.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
rm(plot, nox_group_one_sailing, colours, i, labels)
## PLOT OF NOx for group 1 berth
#####
nox_group_one_berth <- filter(grid_emissions, pollutant == 'NOx' & group == 1 & !is.na(berth) & berth > 0) %>%
dplyr::select(berth)
labels <-  list()
for (i in 1:5) {
labels[[i]]                   <- paste(round(quantile(nox_group_one_berth$berth,seq(0,1,0.2))[i],3),
'-',
round(quantile(nox_group_one_berth$berth,seq(0,1,0.2))[(i+1)],3))
}
labels                          <- unlist(labels)
nox_group_one_berth$emissions <- cut(nox_group_one_berth$berth,
breaks=c(0,quantile(nox_group_one_berth$berth,seq(0,1,0.2))[2:10]),
labels = labels)
colours <- c('#ffffd4','#fed98e','#fe9929','#d95f0e','#993404')
plot <- ggplot() +
geom_sf(data = temp) +
geom_sf(data = nox_group_one_berth,colour = 'black', aes(fill = emissions)) +
coord_sf() +
scale_fill_manual(values = colours, name = "NOx emissions (kg/year)") +
#scale_fill_discrete(name = expression(paste("NOx emissions (", mu, m^2, "/", m^3, ")", sep=""))) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
ggsave('large_grid_berth_group_one_nox.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
rm(plot, nox_group_one_berth, colours, i, labels)
vessel_class
vessel_class$aggregated_class
filter(vessel_class$group == 1)
filter(vessel_class, group == 1)
berths <- st_read('shapefiles/Berths.shp') %>% dplyr::select(berth_name) %>% st_set_crs(27700)
berths
ggplot() + geom_sf(data = berths)
berths
plot(berts)
plot(berths)
plot(berths)
berths
berths$geometry
print(berths$geometry, n=180)
berths(170:180,)
berths[170:180,]
filter(berths, berth_name == 'Coldharbour Jetty')
berths <- st_read('shapefiles/Berths.shp') %>%
dplyr::select(berth_name) %>%
st_set_crs(27700) %>%
filter(berth_name != 'Coldharbour Jetty')
berths
ggplot(data = berths) + geom_sf()
ggplot() +
geom_sf(data = temp) +
geom_sf(data = berths,colour = 'red') +
coord_sf() +
scale_fill_manual(name = "berths") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
ggplot() +
geom_sf(data = temp) +
geom_sf(data = st_crop(berths,temp),colour = 'red') +
coord_sf() +
scale_fill_manual(name = "berths") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
ggplot() +
geom_sf(data = temp) +
geom_sf(data = st_intersects(berths,temp),colour = 'red') +
coord_sf() +
scale_fill_manual(name = "berths") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
st_intersects(temp, berths)
ggplot() +
geom_sf(data = temp) +
geom_sf(data = st_join(berths,temp, join = st_intersects, left = TRUE),colour = 'red') +
coord_sf() +
scale_fill_manual(name = "berths") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
ggplot() +
geom_sf(data = temp) +
geom_sf(data = st_join(berths,temp, join = st_intersects),colour = 'red') +
coord_sf() +
scale_fill_manual(name = "berths") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
ggplot() +
geom_sf(data = temp) +
geom_sf(data = st_join(berths,temp, join = st_intersects, left = FALSE),colour = 'red') +
coord_sf() +
scale_fill_manual(name = "berths") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
## Plot the berths
plot <- ggplot() +
geom_sf(data = temp) +
geom_sf(data = st_join(berths,temp, join = st_intersects, left = FALSE),colour = 'red') +
coord_sf() +
scale_fill_manual(name = "berths") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
ggsave('pla_berths_map.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
rm(plot)
ggplot() +
geom_sf(data = temp) +
geom_sf(data = st_join(berths,temp, join = st_intersects, left = FALSE),colour = 'red', size=0.5) +
coord_sf() +
scale_fill_manual(name = "berths") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
plot <- ggplot() +
geom_sf(data = temp) +
geom_sf(data = st_join(berths,temp, join = st_intersects, left = FALSE),colour = 'red', size=0.5) +
coord_sf() +
scale_fill_manual(name = "berths") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
ggsave('pla_berths_map.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
rm(plot)
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
library(fasterize)
library(raster)
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
library(fasterize)
library(raster)
## Script to process ri
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
vessel_class
list_of_gps_data             <- list.files('gps/', full.names=T, pattern = 'Rdata')
list_of_gps_data             <- data.frame(filename         = list_of_gps_data,
actual_date      = NA,
stringsAsFactors = F)
list_of_gps_data$actual_date <- substr(x     = list_of_gps_data$filename,
start = 24,
stop  = nchar(list_of_gps_data$filename)-6)
list_of_gps_data$actual_date <- as.Date(list_of_gps_data$actual_date, format = '%d_%b_%Y')
list_of_gps_data             <- list_of_gps_data[order(list_of_gps_data$actual_date),]
list_of_gps_data             <- as.list(list_of_gps_data$filename)
list_of_gps_data
pwd()
pwd
gegtwd()
getwd()
load('gps/Gravesend_ANSData_01_Apr_2016.Rdata')
rm(list=ls(all=TRUE))
library(sf)
library(tidyverse)
library(scales)
library(snowfall)
library(fasterize)
library(raster)
## Script to process river emissions and GPS data.
## Key datasets test edit
## 1. 365 GPS days. Need lat, lon, and VESSEL_TYPE
## 2. Vessel classifications. vessel_classifications.csv . Gives vessel type, and group.
## 3. The emissions emissions/inventory_export_2016.csv' which are by LAEI exact cut over London
## 4. A shapefile of the grid exact cut
latlong = "+init=epsg:4326"
ukgrid  = "+init=epsg:27700"
google  = "+init=epsg:3857"
the_thames <- st_read('https://raw.githubusercontent.com/KCL-ERG/useful_geography/master/thames.geojson')
## Import the ship classifications
vessel_class              <- read_csv('docs/vessel_classifications.csv')
vessel_class$code         <- as.character(vessel_class$code)
# Get emissions by exact cut, substance and vessel type
emissions                 <- read_csv('emissions/inventory_export_2016.csv', col_types = cols())
emissions                 <- emissions[emissions$LAEIPLAExt == 'LAEI',]
emissions                 <- emissions[,c('VesselType', 'Substance', 'CellID', 'Sailing_kg', 'AtBerth_kg')]
emissions$CellID          <- as.numeric(emissions$CellID)
names(emissions)          <- c('ship_type', 'pollutant', 'cellid', 'sailing', 'berth')
pollutants_we_want        <- c('PM', 'PM2.5', 'NOx')
emissions                 <- emissions[emissions$pollutant %in% pollutants_we_want,]
rm(pollutants_we_want)
# Tidy up some of the vessel classifications in the emissions file to match the GPS ecssel types
emissions[emissions$ship_type == 'RoRo Cargo / Vehicle','ship_type'] <-'RoRo Cargo/Vehicle'
emissions[emissions$ship_type == 'Cruise ship','ship_type']          <-'Passenger (cruise)'
emissions[emissions$ship_type == 'Passenger', 'ship_type']           <-'Passenger (ferry)'
# Add vessel group type to the emissions, for matching with GPS data
emissions                 <- left_join(emissions, unique(vessel_class[,c('aggregated_class', 'group')]),
by = c('ship_type' = 'aggregated_class'))
# Now get the grid by exact cut
grid                      <- st_read('grids/LAEIGridExtensionV2.gpkg', quiet = T)
# Make map of emissions before aggregating
temp                      <- left_join(emissions, grid, by = c('cellid' = 'CellID')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD) %>%
dplyr::select(cellid, ship_type,large_grid_id, x, y, pollutant, group, sailing, berth) %>%
st_as_sf(coords = c("x", "y"), crs=27700) %>%
st_buffer(dist = 500, endCapStyle= "SQUARE")
nox_roro_sailing <- filter(temp, pollutant == 'NOx' & ship_type == 'RoRo Cargo/Vehicle' & !is.na(sailing) & sailing > 0) %>%
dplyr::select(sailing)
labels <-  list()
for (i in 1:5) {
labels[[i]]                   <- paste(round(quantile(nox_roro_sailing$sailing,seq(0,1,0.2))[i],0),
'-',
round(quantile(nox_roro_sailing$sailing,seq(0,1,0.2))[(i+1)],0))
}
labels                          <- unlist(labels)
nox_roro_sailing$emissions <- cut(nox_roro_sailing$sailing,
breaks=c(0,quantile(nox_roro_sailing$sailing,seq(0,1,0.2))[2:10]),
labels = labels)
colours <- c('#ffffd4','#fed98e','#fe9929','#d95f0e','#993404')
plot <- ggplot() +
geom_sf(data=temp) +
geom_sf(data = nox_roro_sailing, colour = 'black', aes(fill = emissions)) +
coord_sf() +
scale_fill_manual(values = colours, name = "NOx emissions (kg/year)") +
#scale_fill_discrete(name = expression(paste("NOx emissions (", mu, m^2, "/", m^3, ")", sep=""))) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
ggsave('large_grid_nox_roro_sailing_sailing.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
rm(plot, nox_roro_sailing, colours, i, labels)
# Now aggregte
emissions <- emissions %>%
dplyr::select(-ship_type) %>%
group_by(pollutant, cellid, group) %>%
summarise(sailing = sum(sailing, na.rm=T),
berth   = sum(berth, na.rm=T)) %>%
ungroup()
# Link grid exact cut to eimssions exact cut, and remove some unncecessary data
grid_emissions            <- left_join(emissions, grid, by = c('cellid' = 'CellID')) %>%
rename(large_grid_id = GRID_ID0, x = X_COORD, y = Y_COORD) %>%
dplyr::select(cellid, large_grid_id, x, y, pollutant, group, sailing, berth) %>%
as_tibble() %>%
group_by(pollutant, group, large_grid_id, x, y) %>%
summarise(sailing = sum(sailing), berth = sum(berth)) %>%
st_as_sf(coords = c("x", "y"), crs=27700) %>%
st_buffer(dist = 500, endCapStyle= "SQUARE")
rm(emissions, grid)
## PLOT OF NOx for group 1 sailing
#####
nox_group_one_sailing <- filter(grid_emissions, pollutant == 'NOx' & group == 1 & !is.na(sailing) & sailing > 0) %>%
dplyr::select(sailing)
labels <-  list()
for (i in 1:5) {
labels[[i]]                   <- paste(round(quantile(nox_group_one_sailing$sailing,seq(0,1,0.2))[i],0),
'-',
round(quantile(nox_group_one_sailing$sailing,seq(0,1,0.2))[(i+1)],0))
}
labels                          <- unlist(labels)
nox_group_one_sailing$emissions <- cut(nox_group_one_sailing$sailing,
breaks=c(0,quantile(nox_group_one_sailing$sailing,seq(0,1,0.2))[2:10]),
labels = labels)
colours <- c('#ffffd4','#fed98e','#fe9929','#d95f0e','#993404')
plot <- ggplot() +
geom_sf(data = temp) +
geom_sf(data = nox_group_one_sailing, colour = 'black', aes(fill = emissions)) +
coord_sf() +
scale_fill_manual(values = colours, name = "NOx emissions (kg/year)") +
#scale_fill_discrete(name = expression(paste("NOx emissions (", mu, m^2, "/", m^3, ")", sep=""))) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
ggsave('large_grid_sailing_group_one_nox.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
rm(plot, nox_group_one_sailing, colours, i, labels)
## PLOT OF NOx for group 1 berth
#####
nox_group_one_berth <- filter(grid_emissions, pollutant == 'NOx' & group == 1 & !is.na(berth) & berth > 0) %>%
dplyr::select(berth)
labels <-  list()
for (i in 1:5) {
labels[[i]]                   <- paste(round(quantile(nox_group_one_berth$berth,seq(0,1,0.2))[i],3),
'-',
round(quantile(nox_group_one_berth$berth,seq(0,1,0.2))[(i+1)],3))
}
labels                          <- unlist(labels)
nox_group_one_berth$emissions <- cut(nox_group_one_berth$berth,
breaks=c(0,quantile(nox_group_one_berth$berth,seq(0,1,0.2))[2:10]),
labels = labels)
colours <- c('#ffffd4','#fed98e','#fe9929','#d95f0e','#993404')
plot <- ggplot() +
geom_sf(data = temp) +
geom_sf(data = nox_group_one_berth,colour = 'black', aes(fill = emissions)) +
coord_sf() +
scale_fill_manual(values = colours, name = "NOx emissions (kg/year)") +
#scale_fill_discrete(name = expression(paste("NOx emissions (", mu, m^2, "/", m^3, ")", sep=""))) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
ggsave('large_grid_berth_group_one_nox.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
rm(plot, nox_group_one_berth, colours, i, labels)
## For each grid_emissions there is one square per group and per pollutant. More data than we need for the spatial joins with the
## GPS data. So just get unique polygons. Give the unique polygons an ID. Then join these new unique polygon IDs to the full list. Like
## a left join look-up thing
## Setup the small grids
small_grid                         <- unique(grid_emissions[,c('large_grid_id','geometry')]) %>%
st_make_grid(cellsize = 20, what = 'polygons') %>%
st_sf() %>%
st_join(unique(grid_emissions[,c('large_grid_id','geometry')]), join = st_within) %>%
filter(!is.na(large_grid_id)) %>%
mutate(small_grid_id = row_number())
## Make a small  grid results dataset that we'll count the GPS points into
small_grid_result         <- rbind(small_grid %>% mutate(group = 1),
small_grid %>% mutate(group = 2),
small_grid %>% mutate(group = 3),
small_grid %>% mutate(group = 4))
## Plot small grid as example
plot <- ggplot() +
geom_sf(data=filter(small_grid_result, large_grid_id %in% c(10399,10400,10401) & group == 1), aes(colour = as.factor(large_grid_id)), size=0.5) +
geom_sf(data=st_crop(st_transform(the_thames,27700),
filter(small_grid_result, large_grid_id %in% c(10399,10400,10401) & group == 1)), fill=NA, colour = 'blue') +
theme(legend.position = 'none', axis.text = element_blank(), axis.ticks = element_blank()) +
ggtitle('Small grid example')
ggsave('small_grid_example.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
rm(plot)
## Get GPS data
list_of_gps_data             <- list.files('gps/', full.names=T, pattern = 'Rdata')
list_of_gps_data             <- data.frame(filename         = list_of_gps_data,
actual_date      = NA,
stringsAsFactors = F)
list_of_gps_data$actual_date <- substr(x     = list_of_gps_data$filename,
start = 24,
stop  = nchar(list_of_gps_data$filename)-6)
list_of_gps_data$actual_date <- as.Date(list_of_gps_data$actual_date, format = '%d_%b_%Y')
list_of_gps_data             <- list_of_gps_data[order(list_of_gps_data$actual_date),]
list_of_gps_data             <- as.list(list_of_gps_data$filename)
## Example plot of one days days
load('gps/Gravesend_ANSData_01_Apr_2016.Rdata')
test_gps <- filter(data, !is.na(VESSEL_TYPE)) %>%
st_as_sf(coords = c('lon', 'lat'), crs = 4326) %>%
st_transform(27700) %>% #27
st_crop(st_bbox(small_grid)) %>% #61
left_join(vessel_class, by = c('VESSEL_TYPE' = 'code')) %>%
dplyr::select(group)
test_gps
ggplot(data = test_gps) + geom_sf()
test_gps[1:10,]
plot(test_gps[1:10,])
ggplot(test_gps[1:10,]) + geom_sf()
ggplot(test_gps[1:10,]) + geom_sf(alpha = 0.5)
ggplot(test_gps[1:10,]) + geom_sf(alpha = 0.3)
ggplot(test_gps[1:10000,]) + geom_sf(alpha = 0.3)
ggplot() +
geom_sf(data = temp) +
geom_sf(data = test_gps[1:1000,], aes(colour = group))
ggplot() +
geom_sf(data = temp) +
geom_sf(data = test_gps[1:1000,], aes(colour = as.character(group)))
ggplot() +
geom_sf(data = temp) +
geom_sf(data = test_gps[1:100,], aes(colour = as.factor(group))) +
scale_fill_manual(values = c('red', 'green', 'blue', 'black'))
ggplot() +
geom_sf(data = temp) +
geom_sf(data = test_gps[1:100,], aes(colour = as.factor(group))) +
scale_colour_manual(values = c('red', 'green', 'blue', 'black'))
ggplot() +
geom_sf(data = temp) +
geom_sf(data = test_gps[1:100,], aes(colour = as.character(group))) +
scale_colour_manual(values = c('red', 'green', 'yellow', 'blue'))
ggplot() +
geom_sf(data = temp) +
geom_sf(data = test_gps[1:100,])
ggplot() +
geom_sf(data = temp) +
geom_sf(data = test_gps[1:100,]) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank()
)
rm(data)
rm(small_grid_result)
rm(small_grid)
ggplot() +
geom_sf(data = temp) +
geom_sf(data = test_gps[1:100,], alpha=0.3, size=0.5) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
ggplot() +
geom_sf(data = temp) +
geom_sf(data = test_gps[1:100,], alpha=0.3, size=0.5, colour='blue') +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
plot <- ggplot() +
geom_sf(data = temp) +
geom_sf(data = test_gps, alpha=0.3, size=0.5, colour='blue') +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
ggsave('one_day_gps_example.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
small_grid <- read_csv('results/shipping_emissions_20m.csv') %>%
st_as_sf(coords = c("x", "y"), crs=27700) %>%
st_buffer(dist = 10, endCapStyle= "SQUARE")
small_grid
ggplot(data=small_grid[1:100,]) + geom_sf()
ggplot(data=small_grid) + geom_sf()
ggplot(data=filter(small_grid, group == 1)) + geom_sf()
ggplot(data=filter(small_grid, group == 1)) + geom_sf() + coord_sf(xlim = c(529035, 533671), ylim = c(179149, 181052))
ggplot(data=filter(small_grid, group == 1)) + geom_sf() + coord_sf(xlim = c(531035, 533671), ylim = c(179149, 181052))
ggplot(data=filter(small_grid, group == 1)) + geom_sf() + coord_sf(xlim = c(529535, 533671), ylim = c(180149, 181052))
ggplot(data=filter(small_grid, group == 1)) + geom_sf() + coord_sf(xlim = c(529635, 533671), ylim = c(180049, 181052))
ggplot(data=filter(small_grid, group == 1)) + geom_sf() + coord_sf(xlim = c(529735, 533671), ylim = c(180049, 181052))
small_grid <- read_csv('results/shipping_emissions_20m.csv') %>%
st_as_sf(coords = c("x", "y"), crs=27700) %>%
st_buffer(dist = 10, endCapStyle= "SQUARE")
small_grid <- filter(small_grid, group == 1 & !is.na(no2) & no2 > 0)
labels <-  list()
for (i in 1:5) {
labels[[i]]                   <- paste(round(quantile(small_grid$no2,seq(0,1,0.2))[i],3),
'-',
round(quantile(small_grid$no2,seq(0,1,0.2))[(i+1)],3))
}
labels                          <- unlist(labels)
small_grid$emissions <- cut(small_grid$no2,
breaks=c(0,quantile(small_grid$no2,seq(0,1,0.2))[2:10]),
labels = labels)
colours <- c('#ffffd4','#fed98e','#fe9929','#d95f0e','#993404')
ggplot() +
geom_sf(data = temp) +
geom_sf(data = small_grid,colour = 'black', aes(fill = emissions)) +
coord_sf(xlim = c(529735, 533671), ylim = c(180049, 181052)) +
scale_fill_manual(values = colours, name = "NOx emissions (kg/year)") +
#scale_fill_discrete(name = expression(paste("NOx emissions (", mu, m^2, "/", m^3, ")", sep=""))) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
plot <- ggplot() +
geom_sf(data = temp) +
geom_sf(data = small_grid,colour = 'black', aes(fill = emissions)) +
coord_sf(xlim = c(529735, 533671), ylim = c(180049, 181052)) +
scale_fill_manual(values = colours, name = "NO2 emissions (kg/year)") +
#scale_fill_discrete(name = expression(paste("NOx emissions (", mu, m^2, "/", m^3, ")", sep=""))) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
ggsave('small_grid_passenger_no2_emissions_example.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
rm(plot, small_grid, colours, i, labels)
small_grid <- read_csv('results/shipping_emissions_20m.csv') %>%
st_as_sf(coords = c("x", "y"), crs=27700) %>%
st_buffer(dist = 10, endCapStyle= "SQUARE")
small_grid <- filter(small_grid, group == 1 & !is.na(no2) & no2 > 0)
labels <-  list()
for (i in 1:5) {
labels[[i]]                   <- paste(round(quantile(small_grid$no2,seq(0,1,0.2))[i],3),
'-',
round(quantile(small_grid$no2,seq(0,1,0.2))[(i+1)],3))
}
labels                          <- unlist(labels)
small_grid$emissions <- cut(small_grid$no2,
breaks=c(0,quantile(small_grid$no2,seq(0,1,0.2))[2:10]),
labels = labels)
colours <- c('#ffffd4','#fed98e','#fe9929','#d95f0e','#993404')
plot <- ggplot() +
geom_sf(data = temp) +
geom_sf(data = small_grid,lwd =0, aes(fill = emissions)) +
coord_sf(xlim = c(529735, 533671), ylim = c(180049, 181052)) +
scale_fill_manual(values = colours, name = "NO2 emissions (kg/year)") +
#scale_fill_discrete(name = expression(paste("NOx emissions (", mu, m^2, "/", m^3, ")", sep=""))) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank())
ggsave('small_grid_passenger_no2_emissions_example.png', plot = plot, path = 'maps/', height = 5, width = 15, units='cm')
rm(plot, small_grid, colours, i, labels)
